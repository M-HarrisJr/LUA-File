-- Michael Harris

-- The purpose of this code is to allow players to purchase vehicles in game and allows for the player to own the vehicle.

-- Declarations
local ShopCars = game.ServerStorage:WaitForChild("ShopCars")
local PurchaseEvent = game.ReplicatedStorage:WaitForChild("PurchaseCar")
local PurchaseFailedEvent = game.ReplicatedStorage:WaitForChild("PurchaseCarFailed")
local AddCarEvent = game.ReplicatedStorage:WaitForChild("AddCar")
local GetCarParamsFunc = game.ReplicatedStorage:WaitForChild("GetCarParams")
local ServerPurchasedCars = game.ServerStorage:WaitForChild("PurchasedCars")

-- Once a player opens up the dealership screen, this script allows for the player to purchase a car and has input validation for if the car is already owned or the player cannot afford to purchase the specified vehicle.
function AddCar(Cost, Cash, PurchasedCars, car, player, carname)
	if Cost and Cash.Value >= Cost.Value and not PurchasedCars:FindFirstChild(carname) then
		local ClonedCar = car:Clone()
		ClonedCar.Parent = PurchasedCars
		Cash.Value = Cash.Value - Cost.Value
		AddCarEvent:FireClient(player, carname)
		-- Input Validation
	elseif Cost and Cash.Value < Cost.Value and not PurchasedCars:FindFirstChild(carname) then
		PurchaseFailedEvent:FireClient(player, Color3.fromRGB(255, 0, 0), "You don't have enough money")
	elseif PurchasedCars:FindFirstChild(carname) then
		PurchaseFailedEvent:FireClient(player, Color3.fromRGB(255, 0, 0), "You already own this car")
	end
end

-- This part of the script finds all the necessary information for the purchase of a vehicle.
PurchaseEvent.OnServerEvent:Connect(function(player, carname)
	local leaderstats = player:FindFirstChild("leaderstats")
	local PurchasedCars = ServerPurchasedCars:FindFirstChild(player.Name)
	if leaderstats and PurchasedCars then
		local car = ShopCars:FindFirstChild(carname)
		if car then
			local Cash = leaderstats:FindFirstChild("Cash")
			local Cost = car:FindFirstChild("Cost")
			AddCar(Cost, Cash, PurchasedCars, car, player, carname)
		end
	end
end)

-- Formatting for the cost of vehicles, modulized.
function comma_value(n)
	local left, num, right = string.match(n, '^([^%d]*%d)(%d*)(.-)$')
	return left .. (num:reverse():gsub('(%d%d%d)', '%1 '):reverse()) .. right
end

function GetCarParams(player, carname)
	local Result = {}
	Result.Name = "No name"
	Result.Cost = "No price"
	Result.Power = "--"
	local Car = ShopCars:FindFirstChild(carname)

	if Car then
		local CarName = Car:FindFirstChild("CarName")
		if CarName then
			Result.Name = CarName.Value
		end
		local Cost = Car:FindFirstChild("Cost")
		if Cost then
			Result.Cost = Cost.Value > 0 and '$' .. comma_value(Cost.Value) or 'Free'
		end
		local Power = Car:FindFirstChild("Power")
		if Power then
			Result.Power = Power.Value
		end
	end
	return Result
end

GetCarParamsFunc.OnServerInvoke = GetCarParams
